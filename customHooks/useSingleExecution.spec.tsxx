import { renderHook } from '@testing-library/react';
import { useSingleExecution } from './useSingleExecution';

describe('useSingleExecution', () => {
  it('should execute the method only once', () => {
    const mockMethod = jest.fn();
    const { result } = renderHook(() => useSingleExecution(mockMethod));

    // First call
    result.current();
    expect(mockMethod).toHaveBeenCalledTimes(1);

    // Second call
    result.current();
    expect(mockMethod).toHaveBeenCalledTimes(1);
  });

  it('should handle empty function gracefully', () => {
    const emptyFunction = jest.fn();
    const { result } = renderHook(() => useSingleExecution(emptyFunction));
    
    // First call
    result.current();
    expect(emptyFunction).toHaveBeenCalledTimes(1);
    
    // Second call
    result.current();
    expect(emptyFunction).toHaveBeenCalledTimes(1);
  });

  it('should maintain single execution across re-renders', () => {
    const mockMethod = jest.fn();
    const { result, rerender } = renderHook(() => useSingleExecution(mockMethod));

    // First call
    result.current();
    expect(mockMethod).toHaveBeenCalledTimes(1);

    // Re-render
    rerender();

    // Second call after re-render
    result.current();
    expect(mockMethod).toHaveBeenCalledTimes(1);
  });
}); 
